// Make sure to generally ignore whitespace
//WHITESPACE = _{ " " | "\t" | "\r\n" | "\r" | "\n" }
WHITESPACE = _{ " " | "\t" }

// Programs are constructed from one or more functions
//Program = { SOI ~ (Function | Comment)* ~ EOI }
Program = { SOI ~ (LineComment | NEWLINE)* ~ EOI }


// LINK: https://pest.rs/book/examples/json.html#writing-the-grammar
Comments = ${ (LineComment)+ }
    LineComment = @{ "::" ~ LineCommentContents* }
        LineCommentContents = { !(NEWLINE) ~ ANY }



/*
// Functions are identifiers possibly followed by more identifiers or values
Function = { "(" ~ Identifier ~ (Identifier | Value | Function | Comments)* ~ ")" }

Identifier = @{ (ASCII_ALPHANUMERIC | "-" | "_")+ }

// Don't keep the parsed `Value` object
Value = _{ Array | String | Number | Boolean | Null }

Array = { "[" ~ (Identifier | Value | Function)* ~ "]" }

Boolean = { "True" | "False" }

Null = { "Null" }

String = ${ "\"" ~ StringContents ~ "\"" }

// Keep the whitespace (literal) characters in the string
StringContents = @{ Character* }

Character = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

Number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
*/
