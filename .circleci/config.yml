version: 2
jobs:
  build:
    docker:
      - image: circleci/rust
    branches:
      only:
        - master
    steps:
      - checkout
      - run: sudo apt-get install -y mingw-w64
      - run: rustup target add x86_64-pc-windows-gnu
      # https://github.com/rust-lang/rust/issues/33465
      - run: cargo rustc --release --target=x86_64-pc-windows-gnu -- -C linker=x86_64-w64-mingw32-gcc
      - run: ls target
      - persist_to_workspace:
          root: target
          paths:
            - /*

  # https://circleci.com/blog/exploring-domain-driven-design-at-circleci/
  # Publish only on tag
  publish:
    filters:
      tags:
        only: /^v\d+\.\d+\.\d+$/
    docker:
      - image: cibuilds/github:0.10
    branches:
      only:
        - master
    steps:
      - attach_workspace:
          at: target
      - run: ls target
      - run: ls target/x86_64-pc-windows-gnu
      # - run:
      #     name: "Publish Release on GitHub"
      #     command: |
      #       VERSION=$(my-binary --version)
      #       ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} target/


workflows:
  version: 2
  main:
    jobs:
      - build
      - publish:
          requires:
            - build




# docker:
#   - image: docker
# branches:
#   only:
#     - master
# steps:
#   - setup_remote_docker
#   - run: curl https://sh.rustup.rs -sSf | sh
#   - run: cargo install cross
#   - run: cargo install cross
#   - run: cross build --target aarch64-unknown-linux-gnu
#   - checkout


# I could docker run <rust-container> --cross build --target <target>

#   - run: echo "Building..."
#   - run: cargo build --release
#   - run: ls target/release/
#   - run: target/release/lambda_core -c '(print "Hello World!")'
#   - run: cargo test --release
#   - run: echo "Done"

